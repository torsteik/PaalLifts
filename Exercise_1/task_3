Exercise 1:
  3:
    What is concurrency? What is parallelism? What's the difference?
      Concurrency er når to eller flere oppgaver kjøres i samme tidsrom,
      men i et enkelt øyeblikk skjer det bare progresjon på en oppgave.
      
      Parallelism er når to eller flere oppgaver kjøres samtidig. Dvs at i
      et enkelt øyeblikk vil det kunne skje progresjon på begge oppgavene. Det oppnås
      som regel ved at to enheter jobber samtidig med relaterte oppgaver. Parallelism
      brukes som regel når et større problem kan brytes ned i mindre uavhengige problem,
      så blir disse mindre problemene kjørt parallelt.
  
    Why have machines become increasingly multicore in the past decade?
      Før var det størst fokus på å forbedre ytelse ved å minske størrelsen på enheten, men etterhvert
      som enhetene ble mindre ble varme og synkronisering større og større problemer. Derfor begynte man
      å fokusere mer på andre metoder for å bedre ytelse som f. eks. multicore machines.
    
    What kinds of problems motivates the need for concurrent execution?
      If a thread needs a results from another thread, the two threads can be run with concurrency so that
      the thread can be run before the other thread as completed, it can be run when the result is ready.
    
    Does creating concurrent programs make the programmer's life easier? Harder? Maybe both? 
      Begge. Å kunne bruke tråder vil kunne gi opphav til enklere løsninger av større problemer, men
      samtidig legger man til et element programmereren må forstå.
    
    What are the differences between processes, threads, green threads, and coroutines?
      En prosess er en instanse av et program som kjøres. 
      
      En prosess vil deles inn i flere tråder som behandles av en scherdueler. Tråder deler 
      resurser i motsetning til prosesser.
      
      Når et OS ikke støtter multithreading kan vi i software lage en virtual machine som gjør det. I den 
      virtuelle maskinen kan vi bruke multithreading, dette kan gjøres ved å senke klokkehastigheten slik at
      det blir mulig å jobbe med to tråder i serie i løpet av en sykel. Denne typen threading må styres av software
      og vi kaller trådene green threads.
      
      Når vi bruker coroutines lar vi trådene gi fra seg prosessoren ved at de kjører et kall til en yield funskjon.
      Vanligvis er det schedueleren som avslutter trådene på forhåndsbestemte tidspunkt, men ved å la trådene kunne gi
      fra seg styringa selv kan vi oppnå bedre effektivitet i noen scenarioer. Coroutines vil i motsetning til subroutines
      kunne lagre sin state når den gir fra seg kontrollen, slik at den kan fortsette der den slapp neste gang den får styringa.
    
    Which one of these do pthread_create() (C/POSIX), threading.Thread() (Python), go (Go) create?
      Disse lager en tråd.
    
    How does pythons Global Interpreter Lock (GIL) influence the way a python Thread behaves?
      GIL sørger for at kun en tråd kan kjøre om gangen, dvs at programmet ikke kan ta i bruk parallelism(flere kjerner samtidig).
      Dette gjør at multithread programmer vil være treigere, men implementasjonen blir mye lettere.
    
    With this in mind: What is the workaround for the GIL?
      Man kan bruke process-based concurrency. Eller man kan bruke Cython som tar kode skrevet i Python og oversetter til C.
    
    What does func GOMAXPROCS(n int) int change?
      Den endrer maks antall CPU'er som kan kjøre samtidig.
